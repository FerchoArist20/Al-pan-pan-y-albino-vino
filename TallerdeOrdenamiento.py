# -*- coding: utf-8 -*-
"""TallerDeOrdenamiento

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R5wIPlyHp4qwv-MFSK5e31JDWEhicGFt

#Clase completa
"""

class Taller_Ordenamiento:
  #PRIMERO EL MERGESORT
  def Merge(lista_right, lista_left):
    lista_resultado = []

    while(len(lista_left) > 0 and len(lista_right) > 0):
      if lista_left[0] < lista_right[0]:
        lista_resultado.append(lista_left[0])
        lista_left = lista_left[1:]
      else:
        lista_resultado.append(lista_right[0])
        lista_right = lista_right[1:]

    if len(lista_left) > 0:
      lista_resultado = lista_resultado + lista_left

    if len(lista_right) > 0:
      lista_resultado = lista_resultado + lista_right
    return lista_resultado    

  def MergeSort(lista):
    if len(lista) <= 1:
      return lista

    lista_izquierda = lista[:len(lista)//2]
    lista_derecha = lista[len(lista)//2:]

    lista_izquierda = MergeSort(lista_izquierda)
    lista_derecha = MergeSort(lista_derecha)

    return Merge(lista_izquierda, lista_derecha)

  #SEGUNDO EL HEAPSORT
  def heap_sort(arr):
    n = len(arr)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i] 
        heapify(arr, i, 0)

  def heapify(arr, n, i):
    largest = i 
    l = 2 * i + 1 
    r = 2 * i + 2 

    if l < n and arr[l] > arr[largest]:
      largest = l

    if r < n and arr[r] > arr[largest]:
      largest = r

    if largest != i:
      arr[i], arr[largest] = arr[largest], arr[i]
      heapify(arr, n, largest)

  #TERCERO EL QUICKSORT
  def quick(lista):
    if len(lista) <= 1:
      return lista
    else:
      pivote = lista.pop()
      lista1 = []
      lista2 = []

    for i in lista:
      if pivote <= pivote:
        lista1.append(i)
      else:
        lista2.append(i)

    lista1 = quick(lista1)
    lista2 = quick(lista2)

    return lista1 + [pivote] +lista2

  #CUARTO EL COUNTINGSORT
  def counting_sort(array1):
    max_val = max(array1)
    m = max_val + 1
    count = [0]*m 

    for a in array1:
      count[a] += 1

    i = 0
    for h in range(m):
      for c in range(count[h]):
        array1[i] = h
        i += 1
      
    return array1

  #QUINTO EL RADIXSORT
  def count_digits(number):
    if(number<10 and number>0):
      return 1
    else:
      if number < 0:
        positiveNumber = number * (-1)
      else:
        positiveNumber = number
      return 1 + count_digits(positiveNumber//10)

  def n_Number(lista):
    copia_lista = lista.copy()
    if lista != []:
      for i in range(len(copia_lista)-1):
        if count_digits(copia_lista[0]) < count_digits(copia_lista[1]):
          n = copia_lista[1]
          copia_lista.pop(0)
        else:
          n = copia_lista[0]
          copia_lista.pop(1)
      return count_digits(n)
    else:
      return 0

  def zero_completion(lista):
    n = n_Number(lista)
    new_list = []
    for i in lista:
      if count_digits(i) < n:
        fullNumber = f'{i:0{n}d}'
        #fullNumberInt = int(fullNumber)
        new_list.append(fullNumber)
      else:
        fullNumberStr = str(i)
        new_list.append(fullNumberStr)
    return new_list

  def radixSort(lista):
    vector = []
    for i in range(10):
      vector.append([])
    contador = -1
    for i in range(len(lista[0])):
      for i in lista:
        if i[contador] == "0":
          vector[0].append(i)
        if i[contador] == "1":
          vector[1].append(i)
        if i[contador] == "2":
          vector[2].append(i)
        if i[contador] == "3":
          vector[3].append(i)
        if i[contador] == "4":
          vector[4].append(i)
        if i[contador] == "5":
          vector[5].append(i)
        if i[contador] == "6":
          vector[6].append(i)
        if i[contador] == "7":
          vector[7].append(i)
        if i[contador] == "8":
          vector[8].append(i)
        if i[contador] == "9":
          vector[9].append(i)
      contador -= 1
      acumulador = []
      for i in vector:
        if i != []:
          acumulador = acumulador + i
      lista = acumulador
      vector = [[],[],[],[],[],[],[],[],[],[]]

    final_list = []
    for i in acumulador:
      final_list.append(int(i))
    return final_list
  
  #SEXTO BURBUJA
  def burbuja(lista):         
    tamaño = len(lista) - 1
    for i in range(1, tamaño):
      for j in range(0, tamaño):
        if lista[j] > lista[j+1]:
          temp = lista[j]
          lista[j] = lista[j+1]
          lista[j+1] = temp
    return lista

import pandas as pd
from pandas import json_normalize
import requests
import json

link = "https://www.datos.gov.co/resource/kvs2-zsr7.json"
data = requests.get(link)
datos = json.loads(data.text)
datos = json_normalize(datos)
datos

datos_api = datos["id"]
datos_api = datos_api.astype(int)
print(list(datos_api))

ordenamiento = Taller_Ordenamiento
print(ordenamiento.burbuja(list(datos_api)))

ordenamiento = Taller_Ordenamiento
print(ordenamiento.counting_sort(list(datos_api)))

ordenamiento = Taller_Ordenamiento
print(ordenamiento.MergeSort(list(datos_api)))